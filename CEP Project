#include <stdio.h>
float determinant(int D[3][3]){
 float d=0;
 for (int i = 0; i < 3; i++)//determinant of a matrix
 {
 d = d + (D[0][i]*(D[1][(i+1)%3]*D[2][(i+2)%3] - D[1][(i+2)%3]*D[2][(i+1)%3]));
 }
 return d;
}
int main()
{
 int arr[3][4], i;
 float cofac[3][3],arrT[3][3],inv[3][3],mul[3][1];
 float D,D1,D2,D3,x,y,z;
 printf("enter the coefficients of linear equations\n");
 for (int i = 0; i < 3; i++)// input taken by user
 {
 for (int j = 0; j < 4; j++){
 scanf("%d",&arr[i][j]);
 }
 }
 for (int i = 0; i < 3; i++)// printing the matrix taken as input
 {
 for (int j = 0; j < 4; j++){
 printf("arr[%d][%d] is %d\n",i,j,arr[i][j]);

 }
 }
 printf("Press 1 for Cramer's rule\n");
 printf("Press 2 for Matrix Inverse Method\n");
 printf("Enter the number with respect to the method you want to calculate\n");
 scanf("%d",&i);
 switch (i)
 {
 case 1:
 //CRAMER'S RULE:
 int A[3][3]= {{arr[0][0], arr[0][1], arr [0][2]},
 {arr[1][0], arr[1][1], arr [1][2]},
 {arr[2][0], arr[2][1], arr [2][2]}};
 int d1[3][3]={{arr[0][3], arr[0][1], arr [0][2]},
 {arr[1][3], arr[1][1], arr [1][2]},
 {arr[2][3], arr[2][1], arr [2][2]}};
 int d2[3][3]={{arr[0][0], arr[0][3], arr [0][2]},
 {arr[1][0], arr[1][3], arr [1][2]},
 {arr[2][0], arr[2][3], arr [2][2]}};
 int d3[3][3]={{arr[0][0], arr[0][1], arr [0][3]},
 {arr[1][0], arr[1][1], arr [1][3]},
 {arr[2][0], arr[2][1], arr [2][3]}};
 D=determinant(A);
 D1=determinant(d1);
 D2=determinant(d2);
 D3=determinant(d3);
 printf("|D|= %.2f\n",D);
 printf("|D1|= %.2f\n",D1);
 printf("|D2|= %.2f\n",D2);
 printf("|D3|= %.2f\n",D3);
 if (D!=0)
 {
 x=D1/D;
 y=D2/D;
 z=D3/D;
 printf("the value of x is %.2f\n",x);
 printf("the value of y is %.2f\n",y);
 printf("the value of z is %.2f\n",z);
 }
 else
 {
 if (D1!=0 || D2!=0 || D3!=0)
 {
 printf("system has no solution");
 }
 else
 {
 printf("system has infinite solution");
 }


 }
 break;

 case 2:
 // MATRIX INVERSE METHOD
 int B[3][3]= {{arr[0][0], arr[0][1], arr [0][2]},
 {arr[1][0], arr[1][1], arr [1][2]},
 {arr[2][0], arr[2][1], arr [2][2]}};
 D=determinant(B);
 printf("|D|=%.2f\n",D);
 if (D==0)
 {
 printf("The given matrix is singular so inverse of matrix does not exist");
 }
 else
 {
 for (int i = 0; i < 3; i++)//co-factors of matrix
 {
 for (int j = 0; j < 3; j++){
 cofac[i][j]=((arr[(i+1)%3][(j+1)%3] * arr[(i+2)%3][(j+2)%3]) -
(arr[(i+1)%3][(j+2)%3]*arr[(i+2)%3][(j+1)%3]));
 }

 }
 printf("transpose of matrix is:\n");
 for (int i = 0; i < 3; i++)//transpose of a matrix
 {
 for (int j = 0; j < 3; j++){
 arrT[i][j] = cofac[j][i];
 printf("%.2f ", arrT[i][j]);
 }
 printf("\n");
 }
 printf("inverse of matrix is:\n");
 for(int i=0; i<3; i++)//inverse of a matrix
 {
 for(int j=0; j<3; j++){
 inv[i][j]=arrT[i][j]/D;
 printf("%.2f ", inv[i][j]);
 }
 printf("\n");
 }
 int b[3][1]={{arr[0][3]},
 {arr[1][3]},
 {arr[2][3]}};
 for (int i= 0 ; i < 1 ; i++ )// matrix multipliction
 {
 for (int j = 0 ; j < 3 ; j++ )
 {
 mul[j][i] = 0;
 for (int k = 0 ; k < 3 ; k++ )
 {
 mul[j][i]= mul[j][i]+inv[j][k]*b[k][i];
 }
 }
 }
 printf("the value of x is %.2f\n",mul[0][0]);
 printf("the value of y is %.2f\n",mul[1][0]);
 printf("the value of z is %.2f\n",mul[2][0]);

 }

 default:
 break;
 }
 return 0;
}
